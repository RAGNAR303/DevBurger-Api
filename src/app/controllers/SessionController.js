// Importa o model 'User' (provavelmente definido com Sequelize)
import User from '../models/User.js';

// Importa tudo da biblioteca Yup para fazer valida√ß√£o de dados
import * as Yup from 'yup';
import jwt from 'jsonwebtoken';
import authConfig from '../../config/auth.js';

// Define a classe 'SessionController' que vai lidar com login/autentica√ß√£o
class SessionController {
  // M√©todo ass√≠ncrono chamado 'store', que ser√° chamado ao tentar fazer login
  async store(request, response) {
    // Cria um schema Yup para validar os dados da requisi√ß√£o
    // Valida se o email √© v√°lido e se a senha tem pelo menos 8 caracteres
    const schema = Yup.object({
      email: Yup.string().email().required(), // Email obrigat√≥rio e com formato v√°lido
      password: Yup.string().min(8).required(), // Senha obrigat√≥ria e com no m√≠nimo 8 caracteres
    });
    // Valida os dados do request.body com base no schema
    // Retorna true ou false
    const isValid = await schema.isValid(request.body);

    // Fun√ß√£o auxiliar que envia uma resposta de erro padr√£o
    const emailOrPasswordIncorrect = () =>
      response
        .status(401) // C√≥digo HTTP 401: N√£o autorizado
        .json({ error: 'Make sure your email or password are correct' });
    // Se os dados enviados forem inv√°lidos, retorna erro
    if (!isValid) {
      return emailOrPasswordIncorrect();
    }

    // Extrai email e password do corpo da requisi√ß√£o
    const { email, password } = request.body;

    // Procura um usu√°rio no banco de dados com o email fornecido
    const user = await User.findOne({
      where: {
        email,
      },
    });

    // Se o usu√°rio n√£o existir, retorna erro
    if (!user) {
      return emailOrPasswordIncorrect();
    }

    // Verifica se a senha informada bate com a senha do usu√°rio
    // Presume-se que o m√©todo 'checkPassword' esteja definido no model User (ex: usando bcrypt)
    const isSamePassword = await user.checkPassword(password);

    // Se a senha estiver errada, retorna erro
    if (!isSamePassword) {
      return emailOrPasswordIncorrect();
    }

    // Se estiver tudo certo, retorna os dados do usu√°rio autenticado
    return response.status(201).json({
      id: user.id, // ID do usu√°rio
      name: user.name, // Nome
      email, // Email
      admin: user.admin, // Se √© admin ou n√£o (se houver esse campo)
      token: jwt.sign({ id: user.id }, authConfig.secret, {
        expiresIn: authConfig.expiresIn,
      }),
      // } ),
    });
  }
}

// Exporta uma nova inst√¢ncia do SessionController
// Assim, voc√™ pode us√°-lo diretamente nas rotas
export default new SessionController();

// üîê Resumo do que esse c√≥digo faz:
// Valida os dados do login (email e senha).

// Procura o usu√°rio pelo email no banco.

// Compara a senha informada com a senha salva.

// Se estiver tudo certo, retorna os dados do usu√°rio.
